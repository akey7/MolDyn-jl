---
title: "MolDynMD-jl HCl Trajectory"
author: "Alicia Key"
date: "03/10/2024"
format:
  html:
    code-fold: true
editor: source
jupyter: julia-1.10
---

## Load Modules

```{julia}
using Plots

include("src/mol_dyn_md.jl")
using .MolDyn
```

## Setup and Run Simulation

### Define Constants

Expand code block below to see the contants, which include an amu to kg conversion and the number of steps in the simulation.

```{julia}
#| label: set-constants
#| echo: true
#| include: true

kg_per_amu = 1.661e-27
num_steps = 25000
```

### ARRAYS HOLDING ATOM AND BOND INFORMATION

```{julia}
# Positions (xs), velocities (vs), and accelerations (accels) arrays:
# First axis is timestep
# Second axis are atoms
# Third axis is x,y,z (meters for position, m/s for velocities)

vs = zeros(Float64, num_steps, 2, 3)
xs = zeros(Float64, num_steps, 2, 3)
accels = zeros(Float64, num_steps, 2, 3)

# Masses: The masses of each atom (kg)
ms = zeros(Float64, 2)

# Total kinetic energies: The total kinetic energy of the system
# at each timestep.

tkes = zeros(Float64, num_steps)

# Total potential energies: Total potential energy of the system
# at each timestep

tpes = zeros(Float64, num_steps)
```

### Initialize Simulation

```{julia}
# Equilibrium bond length for HCl
r_ab_eq_hcl = 1.57e-10

# Assume Cl is at 0,0,0 and H lies along the x-axis

# HCl equilibrium bond length
xs[1, 2, :] = [r_ab_eq_hcl*0.999, 0.0, 0.0]

# Masses, Cl first then H
ms[1] = 35 * kg_per_amu
ms[2] = 1 * kg_per_amu

# 1-2 Bonds
# Rows are bonds, columns are atoms participating in bond
# Note: This is specifying edges on a graph, so 1-2 also has 2-1

one_two_bonds = [1 2; 2 1]

# 1-2 Bonds, stretch constants
# Note: There is the same constant for each direction of the bond
# HCl bond constant 516 N/m according to Atkins and de Paula, pg. 454

one_two_bonds_kab = [516.0 516.0]

# 1-2 Bonds, equilibrium distances
# Note: There is a distance for each direction of the bond

one_two_bonds_req = [r_ab_eq_hcl r_ab_eq_hcl]
```

### Velocity Verlet

```{julia}
dt = 1e-18
stretch_velocity_verlet(xs, vs, accels, tkes, tpes, one_two_bonds, one_two_bonds_kab, one_two_bonds_req, ms, dt, num_steps)
```

## Calculate Analytical Period

Units are seconds

```{julia}
μ = 1/(1/ms[1]+1/ms[2])
2π * sqrt(μ/one_two_bonds_kab[1])
```

## Make Plots

### X-Coordinate of Hydrogen

The period approximately agrees with analytical period.

```{julia}
x_axis = eachindex(xs[:, 2, 1]) / 1000
h_x_axis_trajectory = xs[:, 2, 1]
plot(x_axis, h_x_axis_trajectory, xlabel="Time (fs)", ylabel="H x position (m)")
```

### Total Energy

```{julia}
plot(x_axis, tkes, xlabel="Time (fs)", ylabel="J", label="Ek")
plot!(x_axis, tpes, label="Ep")
plot!(x_axis, tpes + tkes, label="total")
```
